# -*- coding: utf-8 -*-
"""
Created on Thu Apr 17 23:23:07 2025

@author: Conal

"""

import numpy as np
import matplotlib.pyplot as plt
import polytope as pc
import control
import os
import time
from scipy.spatial import ConvexHull
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import rcParams
from PIL import Image
from scipy.linalg import sqrtm
from qpsolvers import solve_qp
from numpy.linalg import matrix_rank
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from pathlib import Path


# Discrete-time system dynamics
A = np.array([
    [0.9835, 2.782, 0],
    [-0.0006821, 0.978, 0],
    [-0.0009730, 2.804, 1]
])

B = np.array([
    [0.01293],
    [0.00100],
    [0.001425]
])

#constraints in radians
deg2rad = lambda deg: deg * np.pi / 180

alpha_max = deg2rad(11.5)
q_max = deg2rad(14)
theta_max = deg2rad(35)
gamma_max = deg2rad(23)  # gamma = theta - alpha
delta_min = deg2rad(-24)
delta_max = deg2rad(27)


alpha_lim = np.rad2deg(alpha_max)
q_lim = np.rad2deg(q_max)
theta_lim = np.rad2deg(theta_max)

# P scales each dimension to match its maximum constraint value
P = np.diag([
    alpha_lim ** 2,
    q_lim ** 2,
    theta_lim ** 2
])  # Units: degrees^2


# State constraints: |alpha|, |q|, |theta|, |theta - alpha| ≤ limits
# These are written as: Fx ≤ f
F = np.array([
    [ 1, 0, 0],   # alpha ≤ alpha_max    satisfies constraint 1
    [-1, 0, 0],   # -alpha ≤ alpha_max
    [ 0, 1, 0],   # q ≤ q_max     satisfies constraint 4
    [ 0, -1, 0],  # -q ≤ q_max
    [ 0, 0, 1],   # theta ≤ theta_max      satisfies constraint 3
    [ 0, 0, -1],  # -theta ≤ theta_max
    [-1, 0, 1],   # theta - alpha ≤ gamma_max     satisfies constraint 5
    [ 1, 0, -1]   # alpha - theta ≤ gamma_max
])
f = np.array([
    alpha_max,
    alpha_max,
    q_max,
    q_max,
    theta_max,
    theta_max,
    gamma_max,
    gamma_max
])
X = pc.Polytope(F, f)

# Input constraints: delta in [delta_min, delta_max]
# Represented as: Gu ≤ g
G = np.array([
    [1],    #satisfies constraint 2
    [-1]
])
g = np.array([
    delta_max,
    -delta_min
])
U = pc.Polytope(G, g)


#MPC horizon and weights

N = 20  # prediction horizon

# Weight matrices (penalize state and input)

"""
High Q penalties severely reduce the polytope volume and the
volume of the invariant set is also reduced
High R penalties create smoother responses but increase control time.
"""
#Q = np.diag([10.0, 1.0, 10.0])   # Penalize α, q, θ
#R = np.array([[0.05]])            # Penalize δ
Q = np.diag([0.1, 0.1, 0.1])   # Penalize α, q, θ
R = np.array([[0.01]])            # Penalize δ


#K:optimal gain matrix,
#S:Solution to discrete time ricatti eq,
#E:Closed loop eigenvalues
K, S, E = control.dlqr(A, B, Q, R)


K = -K  # Now K is compatible with u = Kx
A_cl = A + B @ K



# Constraint: Kx must lie in input constraint set U ⇒ GKx ≤ g
F_u = G @ K  # shape (2, 3)
f_u = g

# Combine state and input constraints: Fx ≤ f AND GKx ≤ g
F_combined = np.vstack([F, F_u])
f_combined = np.hstack([f, f_u])
X0 = pc.Polytope(F_combined, f_combined)


def polytope_contains(P_outer, P_inner, tol=1e-6):
    """Returns True if P_inner ⊆ P_outer by checking all vertices of P_inner."""
    try:
        vertices = pc.extreme(P_inner)
    except Exception as e:
        print("Failed to get extreme points:", e)
        return False

    for v in vertices:
        if not np.all(P_outer.A @ v <= P_outer.b + tol):
            return False
    return True

def polytopes_equal(P1, P2, tol=1e-6):
    return polytope_contains(P1, P2, tol) and polytope_contains(P2, P1, tol)


# Iterative invariant set computation
Xk = X0
for i in range(100):
    F_pre = Xk.A @ A_cl
    f_pre = Xk.b
    pre_Xk = pc.Polytope(F_pre, f_pre)
    
    Xk_next = pc.intersect(Xk, pre_Xk)

    if polytopes_equal(Xk_next, Xk):
        print(f"Maximal invariant set converged at iteration {i}")
        break
    
    Xk = Xk_next



proj = pc.projection(Xk, [1, 2])  # q vs θ


# Get vertices of the projected polytope
vertices = pc.extreme(Xk)  # shape: (n_vertices, 3)
vertices_deg = np.rad2deg(vertices)


try:
    hull = ConvexHull(vertices_deg)

    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection='3d')

    # Get triangles (simplices)
    faces = [vertices_deg[simplex] for simplex in hull.simplices]
    poly3d = Poly3DCollection(faces, alpha=0.4, facecolor='skyblue', edgecolor='gray')
    ax.add_collection3d(poly3d)

    # Plot vertices
    ax.scatter(vertices_deg[:, 0], vertices_deg[:, 1], vertices_deg[:, 2], color='black', s=20)

    ax.set_xlabel("α (°)")
    ax.set_ylabel("q (°/s)")
    ax.set_zlabel("θ (°)")
    ax.set_title("3D Maximal Invariant Set (using Poly3DCollection)")
    ax.grid(True)
    plt.tight_layout()
    plt.show()

except Exception as e:
    print("Convex hull failed:", e)

# Simulate a nominal trajectory using u = Kx
x0 = np.array([deg2rad(10), 0.0, deg2rad(15)])  # start inside safe bounds
N_sim = 75  # simulation steps

X_traj = [x0]
U_traj = []  # Store control actions
x = x0.copy()


"""

"""

for _ in range(N_sim):
    # Formulate QP: minimize (1/2) δᵀ R δ + (xᵀ Q B) δ
    P_qp = R  # shape (1,1)
    q_qp = (B.T @ Q @ x).reshape(-1)  # shape (1,)

    # Input bounds:
    lb = np.array([delta_min])
    ub = np.array([delta_max])

   

    u_opt = solve_qp(
        P=P_qp,
        q=q_qp,
        G=None, h=None, A=None, b=None,
        lb=lb,
        ub=ub,
        solver='cvxopt'  # or try 'osqp' if installed
    )

    if u_opt is None:
        print("QP failed at step!")
        break

    U_traj.append(np.rad2deg(u_opt.item()))
    x = A @ x + B @ u_opt
    X_traj.append(x)
   

    
 
X_traj = np.array(X_traj)  # shape: (N_sim+1, 3)
X_traj_deg = np.rad2deg(X_traj)
U_traj = np.array(U_traj)  # shape: (N_sim,)
U_traj_deg = np.rad2deg(U_traj)

from mpl_toolkits.mplot3d import Axes3D

# Get extreme points of full 3D invariant set
vertices = pc.extreme(Xk)
vertices_deg = np.rad2deg(vertices)

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.view_init(elev=30, azim=140)  # <- Set your custom viewing angle



# Plot invariant set extreme points
vertices = pc.extreme(Xk)
vertices_deg = np.rad2deg(vertices)
ax.scatter(vertices_deg[:, 0], vertices_deg[:, 1], vertices_deg[:, 2],
           color='gray', alpha=0.4, label='Invariant Set Vertices')

# Plot the trajectory
ax.plot(X_traj_deg[:, 0], X_traj_deg[:, 1], X_traj_deg[:, 2],
        color='red', marker='o', label='MPC Trajectory')

# Labels
ax.set_xlabel("α (°) (angle of attack)")
ax.set_ylabel("q (°/s) (pitch angle rate)")
ax.set_zlabel("θ (°) (pitch angle)")
ax.set_title("3D Invariant Set with Nominal MPC Trajectory")
ax.legend()
ax.grid(True)
plt.show()


# Number of frames for full rotation
n_frames = 60
images = []


# Horizontal θ constraint plane
theta_deg_limit = np.rad2deg(theta_max)
alpha_vals = np.linspace(-alpha_max, alpha_max, 10)
q_vals = np.linspace(-q_max, q_max, 10)
alpha_grid, q_grid = np.meshgrid(alpha_vals, q_vals)
theta_plane = np.full_like(alpha_grid, theta_deg_limit)

# Plot positive θ limit
ax.plot_surface(alpha_grid, q_grid, theta_plane, alpha=0.1, color='blue', label='θ max')

# Plot negative θ limit
ax.plot_surface(alpha_grid, q_grid, -theta_plane, alpha=0.1, color='blue')


#Generating GIFs
for i in range(n_frames):
    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection='3d')
    ax.view_init(elev=20, azim=i * 360 / n_frames)

    # Plotting the invariant set as a translucent polyhedron
    poly3d = Poly3DCollection(faces, alpha=0.4, facecolor='skyblue', edgecolor='gray')
    ax.add_collection3d(poly3d)

    # Plot the vertices
    ax.scatter(vertices_deg[:, 0], vertices_deg[:, 1], vertices_deg[:, 2], color='black', s=15)

    # Plot trajectory
    ax.plot(X_traj_deg[:, 0], X_traj_deg[:, 1], X_traj_deg[:, 2], 'r-o', label='MPC Trajectory')

    # Labels and layout
    ax.set_xlabel("α (°) (angle of attack)")
    ax.set_ylabel("q (°/s) (pitch angle rate)")
    ax.set_zlabel("θ (°) (pitch angle)")
    ax.set_title("Rotating Invariant Set + Trajectory")
    ax.legend()
    ax.grid(True)
    plt.tight_layout()

    # Save frame
    fname = f"_frame_{i:03}.png"
    plt.savefig(fname, dpi=100, bbox_inches='tight')
    plt.close()
    images.append(Image.open(fname))

plt.show()



# Desired save path
save_path = Path("C:/Users/Conal/Desktop/invariant_set_polytope_rotation_.gif")

# Ensure parent folder exists
save_path.parent.mkdir(parents=True, exist_ok=True)

# Save the GIF
images[0].save(str(save_path),
               save_all=True,
               append_images=images[1:],
               duration=100,
               loop=0)

print(f"GIF saved successfully to: {save_path}")
    


time_steps = np.arange(len(U_traj))
plt.figure(figsize=(8, 4))
plt.plot(time_steps, U_traj, 'b-o', label='MPC δ (deg)')
plt.axhline(np.rad2deg(delta_max), color='red', linestyle='--', label='δ max')
plt.axhline(np.rad2deg(delta_min), color='red', linestyle='--', label='δ min')
plt.xlabel('Time step')
plt.ylabel('Elevator deflection δ (°)')
plt.title('Control Input with QP-based Constrained MPC')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()


#convergence for all extreme points
vertices = pc.extreme(Xk)  # shape: (n_vertices, 3)


N_sim = 100  # simulation steps
all_X = []  # list of arrays: each of shape (N_sim+1, 3)
all_U = []
exit_points = []  


for i, x0 in enumerate(vertices):
    x = x0.copy()
    X_traj = [x]
    U_traj = []
    exited = False  # Tracking if the trajectory exits the polytope

    for t in range(N_sim):
        u = K @ x
        U_traj.append(u.item())
        x = A @ x + B @ u.reshape(-1)  # ensure x stays shape (3,)
        X_traj.append(x)
    
        # Exit checks for current x 
        if not np.all(Xk.A @ x <= Xk.b + 1e-8):
            print(f"Trajectory {i} exited Xk at step {t}")
            exited = True
            exit_points.append(x)
            break

    all_X.append(np.array(X_traj))
    all_U.append(np.array(U_traj))
    exit_points.append(x if exited else None)
    if not exited:
        exit_points.append(None)
        print(f"Trajectory {i} remained inside the invariant set.")
   
    
fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

for X in all_X:
    X_deg = np.rad2deg(X)
    ax.plot(X_deg[:, 0], X_deg[:, 1], X_deg[:, 2], '-o', linewidth=1.5)

ax.set_xlabel("α (°)")
ax.set_ylabel("q (°/s)")
ax.set_zlabel("θ (°)")
ax.set_title("Closed-loop Trajectories from Extreme Points")
ax.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))

for i, U in enumerate(all_U):
    plt.plot(np.rad2deg(U), label=f'Traj {i+1}')

plt.axhline(np.rad2deg(delta_max), color='red', linestyle='--', label='δ max')
plt.axhline(np.rad2deg(delta_min), color='red', linestyle='--', label='δ min')
plt.xlabel('Time step')
plt.ylabel('Elevator deflection δ (°)')
plt.title('Control Inputs from All Extreme Points')
plt.grid(True)
plt.tight_layout()
plt.show()

images_1 = []
n_frames = 60

for i in range(n_frames):
    fig = plt.figure(figsize=(8, 6))
    ax = fig.add_subplot(111, projection='3d')
    ax.view_init(elev=25, azim=i * 360 / n_frames)

    # Plot polytope and full trajectories 
    poly3d = Poly3DCollection(faces, alpha=0.4, facecolor='skyblue', edgecolor='gray')
    ax.add_collection3d(poly3d)
    ax.scatter(vertices_deg[:, 0], vertices_deg[:, 1], vertices_deg[:, 2], color='black', s=10)

    for X_deg in all_X:
        ax.plot(X_deg[:, 0], X_deg[:, 1], X_deg[:, 2], 'r-', linewidth=1.5)

    ax.set_xlabel("α (°)")
    ax.set_ylabel("q (°/s)")
    ax.set_zlabel("θ (°)")
    ax.set_title("Static Full Trajectories")
    ax.grid(True)
    plt.tight_layout()

    # Plotting red X markers for exit points
    for ep in exit_points:
        if ep is not None:
            ep_deg = np.rad2deg(ep)
            ax.scatter(
                ep_deg[0], ep_deg[1], ep_deg[2],
                color='red', marker='x', s=60, label='Exit Point'
            )


    fname = f"_static_frame_{i:03}.png"
    
    try:
        plt.savefig(fname, dpi=100, bbox_inches='tight')
        plt.close(fig)

        # Checking if the file exists and is non-empty
        if os.path.exists(fname):
            file_size = os.path.getsize(fname)
            print(f"[Frame {i}] saved: {fname} ({file_size} bytes)")

            if file_size > 0:
                images_1.append(Image.open(fname))
            else:
                print(f"File {fname} is empty.")
        else:
            print(f"File {fname} was not created.")

    except Exception as e:
        print(f"Error saving or loading frame {i}: {e}")

# Output path
save_path_1 = Path("C:/Users/Conal/Desktop/closed_loop_trajectory_rotation.gif")
save_path_1.parent.mkdir(parents=True, exist_ok=True)

print(f"Loaded {len(images_1)} frames.")

images_1[0].save(
    str(save_path_1),
    save_all=True,
    append_images=images_1[1:],
    duration=100,
    loop=0
)


print(f"Trajectory GIF saved to: {save_path_1}")
